   ###   lecture-3.33.txt   ###

- All plugins are stored inside wp-content/plugins folder. WordPress will provide 2 plugins
which are the Hello Dolly and Akismet plugins.

- WordPress will scan the plugins directory for files and any subfolder files for file headers

- The minimum requirement for WordPress to recognize plugin is the Plugin Name header 
property. 

- You can name your main plugin files whatever you want. Some plugins will use the index.php
file and other will use the name of their plugin. 



   ###   lecture-3.35.txt   ###

How Hook, Filter and Action Related:

    - A hook is a place in WordPress's code that can get functions added to it. When you create
    a hook in WordPress you give yourself and other developers the opportunity to add in additional
    functionality at that location. 

    - Hooked functions are the pieces of external code that can be added into WordPress' processing
    at the locations specified by its hooks. In other words, there are functions that get Hooked
    into WordPress. 

    - Two types of hooked functions exist: actions and filters. Filters modify existing output,
    while actions can do any type of custom functionality. 

    - Hooks come in two types - action hooks and filter hook - according to which type of
    hooked functions they accept. 

- Hooks, Actions and Filters are what WordPress calls the Plugins API.

- Filter hooks/functions are always pass in something to filter and are always expected to 
return something. You are allowed to return false. 

- Action hooks/functions can do anything behind the scenes. You do not have to output or 
return anything. You can run SQL query or send out an email. Anything goes. 



   ###   lecture-3.36.txt   ###

- It's perfectly acceptable to use the same hooks several times. To control which functions
run first you should set the priority.

- If you do not set the priority, WordPress will run the functions as first come first serve. 
The lower the number the higher the priority it gets.

- Action hooks are triggered using the do_action() function. This function accepts the name of
the hooks you'd like to trigger. 

- Filter hooks are triggered using the apply_filters() function which accepts the name of 
the hook and the data to filter. 



   ###   lecture-3.37.txt   ###

- Checking if a function or constant is defined is a great way to check if a WordPress is 
the one loading your files.

- The register_activation_hook() function is a function specifically made for plugins that
will trigger when your plugin is activated.

- It's always good to practice to perform checks to make sure the current WordPress site is
compatible with your plugin. 

- The version_compare() function allows you to compare version schematics that arent possible
with traditional comparison operators.



   ###   lecture-3.38.txt   ### 

- Custom post types allow you to create a custom UI for a specific kind of content.

- The init hook runs when the WordPress begins to initialize the data. This hook runs early 
so it's the best place to register post types. 

- The _x() function allows you to translate strings and also provide a context for the 
translator. A context allows you to describe how the translated string is being used for a more 
accurate translation. 

- The register_post_type() function will allow you to create a post type. This function requires
the name of the post type along with various settings. 



   ###   lecture-3.39.txt   ###

- Metaboxes are the boxes inside the UI for a post type. You can toggle and drag them around.
Metaboxes make it  easy to organize your fields.

- The metadata API allows you to attach data to specific content from posts to users. By itself,
the data is not useful. Metadata HAS to be attached to something.

- The admin_init hook runs when the admin dashboard and it's data is initialized.

- There are dynamic hooks such as the add_meta_boxes_{{$post_type}} which can trigger 
for certain types of post_types. 



   ###   lecture-3.40.txt   ### 

- It's always a good practice to enqueue files and not assume every theme/plugin has the same files.

- The admin_enqueue_scripts hook is triggered when the user is on the admin side of WordPress.

- The plugins_url() function will point to the wordpress plugins directory. The second parameter
allows you to specify a specific plugin by providing a plugin file/folder.

- The typenow global variable will be set the current post type. 



   ###   lecture-3.41.txt   ###

- The save_post hook is optimally dynamic (save_post_{{$post_type}}). By appending your custom post type you can make
sure the hook is only triggered when your custom post type is created/updated. 

- It's always important to sanitize user input. The update_post_meta will already do this for you,
but you should still take extra precautions.

- Make sure to give your fields unique names as WordPress will also send additional fields when
the form is submitted. 

- Make sure your metabox works for new posts and exsting posts. 



   ###   lecture-3.42.txt   ###

- Filter hooks/functions allow you to filter through data and modify the final result. You're 
always expected to return data. 

- Whenever you create a post type, WordPress will generate a new permalink structure. You need
to flush the rules in order for WordPress to recognize the changes. One way is by updating the
permalink structure from the admin dashboard. 

- Separating the HTML from PHP can be a great way to organize your code.

- I18N means internatiolization. It's a term for making your code translatable.



    ###   lecture-3.43.txt   ###

- WordPress creates about 11 database tables on a fresh installation.

- You are allowed to create your own database tables if the API's do not suit your needs.

- To create a database table you'll need the function dbDelta() to help you do so.

- HeidiSQL is a great tool for interacting with your SQL database. It provides a lot of tools 
and information. 



    ###   lecture-3.44.txt   ###

- WordPress does not provide a AJAX URL variable so you will need to generate one and pass it
to your JS files using the wp_localize_script() function in enqueue.php file. 

- All AJAX requests should be sent to the admin-ajax.php file inside the wp-admin folder. 

- The chrome developer tools provide a way for you to keep track of what files are loaded 
and how long it took to load those files. It even provides information about each 
individual file.

- There are 2 hooks. The wp_ajax and wp_ajax_nopriv hooks. The nopriv version is users who are not logged in. 



    ###   lecture-3.45.txt   ###

- You can insert data using $wpdb->insert() method. This method will also sanitze all data
and generate a proper query for you.

- There are 3 formats which are string, integer and float. The format for string is %s, for integer
is %d and for float is %f. 

- WordPress provides a few method for executing custom queries. The get_var() method will execute 
a custom query and return a single value from that query. 

- the AVG() SQL function will average out all the values from a particular column.'


    ###   lecture-3.47.txt   ### 

- Widgets are called a ta weird time so make sure you include your widgets and functions 
using the full system path.

- You must extend the WP_Widget class so WordPress can assits you with setting up the widget.

- WordPress will take care of submitting, processing and display the values/fields. Use the 
get_field_name() and get_field_id() methods to help you generate the attributes. 

- The update() method allows you to filter the data your own way. It's important that you 
return the array so WordPress can update everything properly.


    ###   lecture-3.48.txt   ###

- Cron jobs are automated tasks that can perform daily, monthly, etc. WordPress comes with it's 
own built-in task manager.

- It's important that you unscheduled your cron jobs after your plugin is deactivated or else 
a user's site might become bloated with unused code. 

- The transients API allows you to store cached data in the database. It allows you to set up 
an expiration time.

- The widget() method is passed in an args array that contains values reated to the theme's 
sidebar HTML. You can use this HTML to format your widget. 


    ###   lecture-3.49.txt   ###

- Shortcodes allow you to add dynamic code into the editor that can be replaced with more code.

- The wp_editor() function will output the tinymce editor so you can use it in your plugins. 

- It's important that you use an ID that only containt lowercase letters and no spaces/underscores

- PHP output buffers help us grab content that would be otherwise outputted. You can grab 
the content and store it in variable for later use. 
Example:
    ob_start();
    wp_editor('default_value', 'editor_id');
    $editorHTML = get_ob_clean();
    return $editorHTML;



    ###   lecture-3.50.txt   ###

- WordPress will load a javascript called tinymce which use can use to interact with it's 
advanced editor. 

- You can filter HTML using the wp_kses() function. This function allows you to set what tags,
attributes and protocol are allowed.

- Alternatively, you can use the wp_kses_post() function to use the same settings WordPress uses 
for filtering it's posts. 

- To insert a post you need to call the wp_insert_post() function. Only the title and 
content are required, but you can set the plethora of options to customize it. 

    ###   lecture-3.51.txt   ###

- Call the do_action() function with no custom name to trigger a custom hook. WordPress will not 
throw any errors if the hook does not have any functions using it. 

- Anonymus functions are special functions with no names. You can pass in anonymus functions to 
your hooks rathe than passing in a string. 

- The wp_mail() function will run the mail() function except it will call hooks to filter
the data before sending out an email.



    ###   lecture-3.51.txt   ###

- Nonces (Numbers only once) are a way to create tokens that you can use to verify the credibility
of a request.

- It is important that you manually authenticate the user if they're logging in for the first
time. Using a wp_signon() function brings back mixed results. 

Example of manual authentication:
    $user = get_user_by('id', $user_id);
    wp_set_current_usert($user_id, $user->user_login);
    wp_set_auth_cookie($user_id, false or true); // see if you want to remember the user
    do_action('wp_login', $user->user_login, $user);

- Use the is_wp_error() to verify if an object is a WordPress object. 



    ###   lecture-3.51.txt   ###

- Use the wp_signon() function to authenticate a user with WordPress.

- Be sure to check if the user has registration turned on. This setting 
only applies to WordPress own registration form, but you should take 
advantage of it anyway. 

- All options are stored inside the options table. Plugins and transients
are also stored inside this table.

- It's always good practice to hide and display content depending if the user
is a logged in or not. 